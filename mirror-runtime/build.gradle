buildscript {
    ext.repositoryName = 'mirror-kotlin'
    ext.versionsProperties = new Properties()
    file("versions.properties").withInputStream { versionsProperties.load(it) }
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/lightningkite/com.lightningkite.krosslin' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versionsProperties.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${versionsProperties.kotlin}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
//        classpath "com.lightningkite:mirror-plugin:0.0.3"
//        classpath "com.lightningkite:mirror-plugin:${versionsProperties.mirror}"
    }
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
//apply plugin: 'com.lightningkite.mirror'
apply plugin: 'kotlinx-serialization'

group 'com.lightningkite'
version versionsProperties.getProperty('mirror')

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()){
            fromPreset(presets.iosX64, 'iosx64')
            fromPreset(presets.iosArm64, 'ios')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versionsProperties.kotlinx_serialization}"
                api "com.lightningkite:kommon-metadata:${versionsProperties.kommon}"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'

                api "com.lightningkite:lokalize-metadata:${versionsProperties.lokalize}"
                api "com.lightningkite:recktangle-metadata:${versionsProperties.recktangle}"
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versionsProperties.kotlinx_serialization}"
                api "com.lightningkite:kommon-jvm:${versionsProperties.kommon}"
            }
        }
        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'

                api "com.lightningkite:lokalize-jvm:${versionsProperties.lokalize}"
                api "com.lightningkite:recktangle-jvm:${versionsProperties.recktangle}"
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versionsProperties.kotlinx_serialization}"
                api "com.lightningkite:kommon-js:${versionsProperties.kommon}"
            }
        }
        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'

                api "com.lightningkite:lokalize-js:${versionsProperties.lokalize}"
                api "com.lightningkite:recktangle-js:${versionsProperties.recktangle}"
            }
        }

        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            iosMain {
                dependencies {
                    api "com.lightningkite:kommon-ios:${versionsProperties.kommon}"
                    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${versionsProperties.kotlinx_serialization}"
                }
            }
            iosTest {
                dependencies {
                    api "com.lightningkite:lokalize-ios:${versionsProperties.lokalize}"
                    api "com.lightningkite:recktangle-ios:${versionsProperties.recktangle}"
                }
            }
            iosx64Main {
                dependencies {
                    api "com.lightningkite:kommon-iosx64:${versionsProperties.kommon}"
                    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${versionsProperties.kotlinx_serialization}"
                }
            }
            iosx64Test {
                dependencies {
                    api "com.lightningkite:lokalize-iosx64:${versionsProperties.lokalize}"
                    api "com.lightningkite:recktangle-iosx64:${versionsProperties.recktangle}"
                }
            }
        }
    }
}

tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
    }
}

if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    task iosTest {
        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
        dependsOn 'linkTestDebugExecutableIosx64'
        group = JavaBasePlugin.VERIFICATION_GROUP
        description = "Runs tests for target 'ios' on an iOS simulator"

        doLast {
            def binary = kotlin.targets.iosx64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
            exec {
                commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
            }
        }
    }
    tasks.check.dependsOn(tasks.iosTest)
}


apply from: rootProject.file("gradle/publish.gradle")
