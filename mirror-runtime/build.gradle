buildscript {
    ext.kotlinVersion = '1.3.10'
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.lightningkite:mirror-plugin:0.0.2"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.lightningkite.mirror'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    pkg {
        repo = project.group.toString()
        name = project.name
        userOrg = "lightningkite"
        licenses = ["MIT"]
        def github = "https://github.com/lightningkite/mirror-kotlin"
        vcsUrl = github
        websiteUrl = github
        issueTrackerUrl = github + "/issues"
        version {
            name = project.version
            released = new Date()
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}
group 'com.lightningkite'
version '0.0.2'

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
//        if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()){
//            fromPreset(presets.iosX64, 'iosx64')
//            fromPreset(presets.iosArm64, 'ios')
//        }
    }
    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-io:0.1.1"
                api "com.lightningkite:kommon-metadata:${project.version}"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'

                api "com.lightningkite:lokalize-metadata:${project.version}"
                api "com.lightningkite:recktangle-metadata:${project.version}"
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "org.jetbrains.kotlinx:kotlinx-io-jvm:0.1.1"
                api "com.lightningkite:kommon-jvm:${project.version}"
            }
        }
        jvmTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'

                api "com.lightningkite:lokalize-jvm:${project.version}"
                api "com.lightningkite:recktangle-jvm:${project.version}"
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
                api "org.jetbrains.kotlinx:kotlinx-io-js:0.1.1"
                api "com.lightningkite:kommon-js:${project.version}"
            }
        }
        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'

                api "com.lightningkite:lokalize-js:${project.version}"
                api "com.lightningkite:recktangle-js:${project.version}"
            }
        }

        iosMain {
            dependencies {
            }
        }
        iosTest {
            dependencies {
            }
        }
        iosx64Main {
            dependencies {
                dependsOn iosMain
            }
        }
        iosx64Test {
            dependencies {
                dependsOn iosTest
            }
        }
    }
}

tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
    }
}

//task iosTest {
//    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
//    dependsOn 'linkTestDebugExecutableIosx64'
//    group = JavaBasePlugin.VERIFICATION_GROUP
//    description = "Runs tests for target 'ios' on an iOS simulator"
//
//    doLast {
//        def binary = kotlin.targets.iosx64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
//        exec {
//            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
//        }
//    }
//}
//tasks.check.dependsOn(tasks.iosTest)

