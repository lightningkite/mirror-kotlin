//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.serialization.json

import com.lightningkite.mirror.TestRegistry
import com.lightningkite.mirror.serialization.DefaultRegistry
import com.lightningkite.mirror.serialization.SerializationRegistry
import kotlin.reflect.KClass
import kotlin.test.Test
import com.lightningkite.mirror.info.*

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object SimpleJSONTestPostClassInfo: ClassInfo<SimpleJSONTest.Post> {

    override val kClass: KClass<SimpleJSONTest.Post> = SimpleJSONTest.Post::class
    override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf()

    override val packageName: String = "com.lightningkite.mirror.serialization.json"
    override val owner: KClass<*>? = SimpleJSONTest::class
    override val ownerName: String? = "SimpleJSONTest"

    override val name: String = "Post"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<SimpleJSONTest.Post>? = null

    val fieldId = FieldInfo<SimpleJSONTest.Post, Long?>(this, "id", Type<Long?>(Long::class, listOf(), true), false, { it.id as Long?}, listOf())
    val fieldUserId = FieldInfo<SimpleJSONTest.Post, Long>(this, "userId", Type<Long>(Long::class, listOf(), false), false, { it.userId as Long}, listOf())
    val fieldTitle = FieldInfo<SimpleJSONTest.Post, String>(this, "title", Type<String>(String::class, listOf(), false), false, { it.title as String}, listOf())
    val fieldBody = FieldInfo<SimpleJSONTest.Post, String>(this, "body", Type<String>(String::class, listOf(), false), false, { it.body as String}, listOf())

    override val fields:List<FieldInfo<SimpleJSONTest.Post, *>> = listOf(fieldId, fieldUserId, fieldTitle, fieldBody)

    override fun construct(map: Map<String, Any?>): SimpleJSONTest.Post {
        //Gather variables
        val id:Long? = map["id"] as Long?
        val userId:Long = map["userId"] as Long
        val title:String = map["title"] as String
        val body:String = map["body"] as String
        //Handle the optionals
        
        //Finally do the call
        return SimpleJSONTest.Post(
            id = id,
            userId = userId,
            title = title,
            body = body
        )
    }

}