//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.test

import kotlinx.serialization.Serializable
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ZooClassInfo: ClassInfo<Zoo> {

    override val kClass: KClass<Zoo> = Zoo::class
    override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)
    override val companion: Any? get() = null

    override val implements: List<Type<*>> = listOf()

    override val packageName: String = "com.lightningkite.mirror.test"
    override val owner: KClass<*>? = null
    override val ownerName: String? = null

    override val name: String = "Zoo"
    override val annotations: List<AnnotationInfo> = listOf(AnnotationInfo("@Serializable", listOf()))
    override val enumValues: List<Zoo>? = null

    val fieldUnit = FieldInfo<Zoo, Unit>(this, "unit", Type<Unit>(Unit::class, listOf(), false), false, { it.unit as Unit}, listOf())
    val fieldBoolean = FieldInfo<Zoo, Boolean>(this, "boolean", Type<Boolean>(Boolean::class, listOf(), false), false, { it.boolean as Boolean}, listOf())
    val fieldByte = FieldInfo<Zoo, Byte>(this, "byte", Type<Byte>(Byte::class, listOf(), false), false, { it.byte as Byte}, listOf())
    val fieldShort = FieldInfo<Zoo, Short>(this, "short", Type<Short>(Short::class, listOf(), false), false, { it.short as Short}, listOf())
    val fieldInt = FieldInfo<Zoo, Int>(this, "int", Type<Int>(Int::class, listOf(), false), false, { it.int as Int}, listOf())
    val fieldLong = FieldInfo<Zoo, Long>(this, "long", Type<Long>(Long::class, listOf(), false), false, { it.long as Long}, listOf())
    val fieldFloat = FieldInfo<Zoo, Float>(this, "float", Type<Float>(Float::class, listOf(), false), false, { it.float as Float}, listOf())
    val fieldDouble = FieldInfo<Zoo, Double>(this, "double", Type<Double>(Double::class, listOf(), false), false, { it.double as Double}, listOf())
    val fieldChar = FieldInfo<Zoo, Char>(this, "char", Type<Char>(Char::class, listOf(), false), false, { it.char as Char}, listOf())
    val fieldString = FieldInfo<Zoo, String>(this, "string", Type<String>(String::class, listOf(), false), false, { it.string as String}, listOf())
    val fieldEnum = FieldInfo<Zoo, Attitude>(this, "enum", Type<Attitude>(Attitude::class, listOf(), false), false, { it.enum as Attitude}, listOf())
    val fieldIntData = FieldInfo<Zoo, IntData>(this, "intData", Type<IntData>(IntData::class, listOf(), false), false, { it.intData as IntData}, listOf())
    val fieldUnitN = FieldInfo<Zoo, Unit?>(this, "unitN", Type<Unit?>(Unit::class, listOf(), true), false, { it.unitN as Unit?}, listOf())
    val fieldBooleanN = FieldInfo<Zoo, Boolean?>(this, "booleanN", Type<Boolean?>(Boolean::class, listOf(), true), false, { it.booleanN as Boolean?}, listOf())
    val fieldByteN = FieldInfo<Zoo, Byte?>(this, "byteN", Type<Byte?>(Byte::class, listOf(), true), false, { it.byteN as Byte?}, listOf())
    val fieldShortN = FieldInfo<Zoo, Short?>(this, "shortN", Type<Short?>(Short::class, listOf(), true), false, { it.shortN as Short?}, listOf())
    val fieldIntN = FieldInfo<Zoo, Int?>(this, "intN", Type<Int?>(Int::class, listOf(), true), false, { it.intN as Int?}, listOf())
    val fieldLongN = FieldInfo<Zoo, Long?>(this, "longN", Type<Long?>(Long::class, listOf(), true), false, { it.longN as Long?}, listOf())
    val fieldFloatN = FieldInfo<Zoo, Float?>(this, "floatN", Type<Float?>(Float::class, listOf(), true), false, { it.floatN as Float?}, listOf())
    val fieldDoubleN = FieldInfo<Zoo, Double?>(this, "doubleN", Type<Double?>(Double::class, listOf(), true), false, { it.doubleN as Double?}, listOf())
    val fieldCharN = FieldInfo<Zoo, Char?>(this, "charN", Type<Char?>(Char::class, listOf(), true), false, { it.charN as Char?}, listOf())
    val fieldStringN = FieldInfo<Zoo, String?>(this, "stringN", Type<String?>(String::class, listOf(), true), false, { it.stringN as String?}, listOf())
    val fieldEnumN = FieldInfo<Zoo, Attitude?>(this, "enumN", Type<Attitude?>(Attitude::class, listOf(), true), false, { it.enumN as Attitude?}, listOf())
    val fieldIntDataN = FieldInfo<Zoo, IntData?>(this, "intDataN", Type<IntData?>(IntData::class, listOf(), true), false, { it.intDataN as IntData?}, listOf())
    val fieldListInt = FieldInfo<Zoo, List<Int>>(this, "listInt", Type<List<Int>>(List::class, listOf(TypeProjection(Type<Int>(Int::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.listInt as List<Int>}, listOf())
    val fieldListIntN = FieldInfo<Zoo, List<Int?>>(this, "listIntN", Type<List<Int?>>(List::class, listOf(TypeProjection(Type<Int?>(Int::class, listOf(), true), TypeProjection.Variance.INVARIANT)), false), false, { it.listIntN as List<Int?>}, listOf())
    val fieldListListEnumN = FieldInfo<Zoo, List<List<Attitude?>>>(this, "listListEnumN", Type<List<List<Attitude?>>>(List::class, listOf(TypeProjection(Type<List<Attitude?>>(List::class, listOf(TypeProjection(Type<Attitude?>(Attitude::class, listOf(), true), TypeProjection.Variance.INVARIANT)), false), TypeProjection.Variance.INVARIANT)), false), false, { it.listListEnumN as List<List<Attitude?>>}, listOf())
    val fieldListIntData = FieldInfo<Zoo, List<IntData>>(this, "listIntData", Type<List<IntData>>(List::class, listOf(TypeProjection(Type<IntData>(IntData::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.listIntData as List<IntData>}, listOf())
    val fieldListIntDataN = FieldInfo<Zoo, List<IntData?>>(this, "listIntDataN", Type<List<IntData?>>(List::class, listOf(TypeProjection(Type<IntData?>(IntData::class, listOf(), true), TypeProjection.Variance.INVARIANT)), false), false, { it.listIntDataN as List<IntData?>}, listOf())
    val fieldTree = FieldInfo<Zoo, Tree>(this, "tree", Type<Tree>(Tree::class, listOf(), false), false, { it.tree as Tree}, listOf())
    val fieldMapStringInt = FieldInfo<Zoo, Map<String, Int>>(this, "mapStringInt", Type<Map<String, Int>>(Map::class, listOf(TypeProjection(Type<String>(String::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<Int>(Int::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.mapStringInt as Map<String, Int>}, listOf())
    val fieldMapIntStringN = FieldInfo<Zoo, Map<Int, String?>>(this, "mapIntStringN", Type<Map<Int, String?>>(Map::class, listOf(TypeProjection(Type<Int>(Int::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<String?>(String::class, listOf(), true), TypeProjection.Variance.INVARIANT)), false), false, { it.mapIntStringN as Map<Int, String?>}, listOf())

    override val fields:List<FieldInfo<Zoo, *>> = listOf(fieldUnit, fieldBoolean, fieldByte, fieldShort, fieldInt, fieldLong, fieldFloat, fieldDouble, fieldChar, fieldString, fieldEnum, fieldIntData, fieldUnitN, fieldBooleanN, fieldByteN, fieldShortN, fieldIntN, fieldLongN, fieldFloatN, fieldDoubleN, fieldCharN, fieldStringN, fieldEnumN, fieldIntDataN, fieldListInt, fieldListIntN, fieldListListEnumN, fieldListIntData, fieldListIntDataN, fieldTree, fieldMapStringInt, fieldMapIntStringN)

    override fun construct(map: Map<String, Any?>): Zoo {
        //Gather variables
        val unit:Unit = map["unit"] as Unit
        val boolean:Boolean = map["boolean"] as Boolean
        val byte:Byte = map["byte"] as Byte
        val short:Short = map["short"] as Short
        val int:Int = map["int"] as Int
        val long:Long = map["long"] as Long
        val float:Float = map["float"] as Float
        val double:Double = map["double"] as Double
        val char:Char = map["char"] as Char
        val string:String = map["string"] as String
        val enum:Attitude = map["enum"] as Attitude
        val intData:IntData = map["intData"] as IntData
        val unitN:Unit? = map["unitN"] as Unit?
        val booleanN:Boolean? = map["booleanN"] as Boolean?
        val byteN:Byte? = map["byteN"] as Byte?
        val shortN:Short? = map["shortN"] as Short?
        val intN:Int? = map["intN"] as Int?
        val longN:Long? = map["longN"] as Long?
        val floatN:Float? = map["floatN"] as Float?
        val doubleN:Double? = map["doubleN"] as Double?
        val charN:Char? = map["charN"] as Char?
        val stringN:String? = map["stringN"] as String?
        val enumN:Attitude? = map["enumN"] as Attitude?
        val intDataN:IntData? = map["intDataN"] as IntData?
        val listInt:List<Int> = map["listInt"] as List<Int>
        val listIntN:List<Int?> = map["listIntN"] as List<Int?>
        val listListEnumN:List<List<Attitude?>> = map["listListEnumN"] as List<List<Attitude?>>
        val listIntData:List<IntData> = map["listIntData"] as List<IntData>
        val listIntDataN:List<IntData?> = map["listIntDataN"] as List<IntData?>
        val tree:Tree = map["tree"] as Tree
        val mapStringInt:Map<String, Int> = map["mapStringInt"] as Map<String, Int>
        val mapIntStringN:Map<Int, String?> = map["mapIntStringN"] as Map<Int, String?>
        //Handle the optionals
        
        //Finally do the call
        return Zoo(
            unit = unit,
            boolean = boolean,
            byte = byte,
            short = short,
            int = int,
            long = long,
            float = float,
            double = double,
            char = char,
            string = string,
            enum = enum,
            intData = intData,
            unitN = unitN,
            booleanN = booleanN,
            byteN = byteN,
            shortN = shortN,
            intN = intN,
            longN = longN,
            floatN = floatN,
            doubleN = doubleN,
            charN = charN,
            stringN = stringN,
            enumN = enumN,
            intDataN = intDataN,
            listInt = listInt,
            listIntN = listIntN,
            listListEnumN = listListEnumN,
            listIntData = listIntData,
            listIntDataN = listIntDataN,
            tree = tree,
            mapStringInt = mapStringInt,
            mapIntStringN = mapIntStringN
        )
    }

}