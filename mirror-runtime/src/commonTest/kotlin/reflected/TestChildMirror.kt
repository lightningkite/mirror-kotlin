//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.info

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*

object TestChildMirror : MirrorClass<TestChild>() {
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<TestChild> get() = TestChild::class as KClass<TestChild>
    override val modifiers: Array<Modifier> get() = arrayOf()
    override val packageName: String get() = "com.lightningkite.mirror.info"
    override val localName: String get() = "TestChild"
    
    val fieldTest: Field<TestChild,Int> = Field(
        owner = this,
        name = "test",
        type = IntMirror,
        optional = true,
        get = { it.test },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<TestChild, *>> = arrayOf(fieldTest)
    
    override fun deserialize(decoder: Decoder): TestChild {
        var testSet = false
        var fieldTest: Int? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldTest = decoderStructure.decodeIntElement(this, 0)
                    testSet = true
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldTest = decoderStructure.decodeIntElement(this, 0)
                    testSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!testSet) {
            fieldTest = 4
        }
        return TestChild(
            test = fieldTest as Int
        )
    }
    
    override fun serialize(encoder: Encoder, obj: TestChild) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeIntElement(this, 0, obj.test)
        encoderStructure.endStructure(this)
    }
}
