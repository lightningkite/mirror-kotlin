//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.test

import kotlinx.serialization.Serializable
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import kotlinx.serialization.SerializableMirror

object TreeMirror : MirrorClass<Tree>() {
    override val empty: Tree get() = Tree(
        name = StringMirror.empty,
        left = null,
        right = null
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Tree> get() = Tree::class as KClass<Tree>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.test"
    override val localName: String get() = "Tree"
    override val implements: Array<MirrorClass<*>> get() = arrayOf()
    override val annotations: List<Annotation> = listOf(SerializableMirror())
    
    val fieldName: Field<Tree,String> = Field(
        owner = this,
        index = 0,
        name = "name",
        type = StringMirror,
        optional = false,
        get = { it.name },
        annotations = listOf<Annotation>()
    )
    
    val fieldLeft: Field<Tree,Tree?> = Field(
        owner = this,
        index = 1,
        name = "left",
        type = TreeMirror.nullable,
        optional = true,
        get = { it.left },
        annotations = listOf<Annotation>()
    )
    
    val fieldRight: Field<Tree,Tree?> = Field(
        owner = this,
        index = 2,
        name = "right",
        type = TreeMirror.nullable,
        optional = true,
        get = { it.right },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Tree, *>> = arrayOf(fieldName, fieldLeft, fieldRight)
    
    override fun deserialize(decoder: Decoder): Tree {
        var nameSet = false
        var fieldName: String? = null
        var leftSet = false
        var fieldLeft: Tree? = null
        var rightSet = false
        var fieldRight: Tree? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldName = decoderStructure.decodeStringElement(this, 0)
                    nameSet = true
                    fieldLeft = decoderStructure.decodeSerializableElement(this, 1, TreeMirror.nullable)
                    leftSet = true
                    fieldRight = decoderStructure.decodeSerializableElement(this, 2, TreeMirror.nullable)
                    rightSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldName = decoderStructure.decodeStringElement(this, 0)
                    nameSet = true
                }
                1 -> {
                    fieldLeft = decoderStructure.decodeSerializableElement(this, 1, TreeMirror.nullable)
                    leftSet = true
                }
                2 -> {
                    fieldRight = decoderStructure.decodeSerializableElement(this, 2, TreeMirror.nullable)
                    rightSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!nameSet) {
            throw MissingFieldException("name")
        }
        if(!leftSet) {
            fieldLeft = null
        }
        if(!rightSet) {
            fieldRight = null
        }
        return Tree(
            name = fieldName as String,
            left = fieldLeft as Tree?,
            right = fieldRight as Tree?
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Tree) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeStringElement(this, 0, obj.name)
        encoderStructure.encodeSerializableElement(this, 1, TreeMirror.nullable, obj.left)
        encoderStructure.encodeSerializableElement(this, 2, TreeMirror.nullable, obj.right)
        encoderStructure.endStructure(this)
    }
}
