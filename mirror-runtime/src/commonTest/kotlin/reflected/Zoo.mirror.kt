//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.test

import kotlinx.serialization.Serializable
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*
import kotlinx.serialization.SerializableMirror

object ZooMirror : MirrorClass<Zoo>() {
    override val empty: Zoo get() = Zoo(
        unit = UnitMirror.empty,
        boolean = BooleanMirror.empty,
        byte = ByteMirror.empty,
        short = ShortMirror.empty,
        int = IntMirror.empty,
        long = LongMirror.empty,
        float = FloatMirror.empty,
        double = DoubleMirror.empty,
        char = CharMirror.empty,
        string = StringMirror.empty,
        enum = AttitudeMirror.empty,
        intData = IntDataMirror.empty,
        unitN = UnitMirror.nullable.empty,
        booleanN = BooleanMirror.nullable.empty,
        byteN = ByteMirror.nullable.empty,
        shortN = ShortMirror.nullable.empty,
        intN = IntMirror.nullable.empty,
        longN = LongMirror.nullable.empty,
        floatN = FloatMirror.nullable.empty,
        doubleN = DoubleMirror.nullable.empty,
        charN = CharMirror.nullable.empty,
        stringN = StringMirror.nullable.empty,
        enumN = AttitudeMirror.nullable.empty,
        intDataN = IntDataMirror.nullable.empty,
        listInt = ListMirror(IntMirror).empty,
        listIntN = ListMirror(IntMirror.nullable).empty,
        listListEnumN = ListMirror(ListMirror(AttitudeMirror.nullable)).empty,
        listIntData = ListMirror(IntDataMirror).empty,
        listIntDataN = ListMirror(IntDataMirror.nullable).empty,
        tree = TreeMirror.empty,
        mapStringInt = MapMirror(StringMirror, IntMirror).empty,
        mapIntStringN = MapMirror(IntMirror, StringMirror.nullable).empty,
        defaultIfNotPresent = 42
    )
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<Zoo> get() = Zoo::class as KClass<Zoo>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.test"
    override val localName: String get() = "Zoo"
    override val implements: Array<MirrorClass<*>> get() = arrayOf()
    override val companion: Any? get() = Zoo.Companion
    override val annotations: List<Annotation> = listOf(SerializableMirror())
    
    val fieldUnit: Field<Zoo,Unit> = Field(
        owner = this,
        index = 0,
        name = "unit",
        type = UnitMirror,
        optional = false,
        get = { it.unit },
        annotations = listOf<Annotation>()
    )
    
    val fieldBoolean: Field<Zoo,Boolean> = Field(
        owner = this,
        index = 1,
        name = "boolean",
        type = BooleanMirror,
        optional = false,
        get = { it.boolean },
        annotations = listOf<Annotation>()
    )
    
    val fieldByte: Field<Zoo,Byte> = Field(
        owner = this,
        index = 2,
        name = "byte",
        type = ByteMirror,
        optional = false,
        get = { it.byte },
        annotations = listOf<Annotation>()
    )
    
    val fieldShort: Field<Zoo,Short> = Field(
        owner = this,
        index = 3,
        name = "short",
        type = ShortMirror,
        optional = false,
        get = { it.short },
        annotations = listOf<Annotation>()
    )
    
    val fieldInt: Field<Zoo,Int> = Field(
        owner = this,
        index = 4,
        name = "int",
        type = IntMirror,
        optional = false,
        get = { it.int },
        annotations = listOf<Annotation>()
    )
    
    val fieldLong: Field<Zoo,Long> = Field(
        owner = this,
        index = 5,
        name = "long",
        type = LongMirror,
        optional = false,
        get = { it.long },
        annotations = listOf<Annotation>()
    )
    
    val fieldFloat: Field<Zoo,Float> = Field(
        owner = this,
        index = 6,
        name = "float",
        type = FloatMirror,
        optional = false,
        get = { it.float },
        annotations = listOf<Annotation>()
    )
    
    val fieldDouble: Field<Zoo,Double> = Field(
        owner = this,
        index = 7,
        name = "double",
        type = DoubleMirror,
        optional = false,
        get = { it.double },
        annotations = listOf<Annotation>()
    )
    
    val fieldChar: Field<Zoo,Char> = Field(
        owner = this,
        index = 8,
        name = "char",
        type = CharMirror,
        optional = false,
        get = { it.char },
        annotations = listOf<Annotation>()
    )
    
    val fieldString: Field<Zoo,String> = Field(
        owner = this,
        index = 9,
        name = "string",
        type = StringMirror,
        optional = false,
        get = { it.string },
        annotations = listOf<Annotation>()
    )
    
    val fieldEnum: Field<Zoo,Attitude> = Field(
        owner = this,
        index = 10,
        name = "enum",
        type = AttitudeMirror,
        optional = false,
        get = { it.enum },
        annotations = listOf<Annotation>()
    )
    
    val fieldIntData: Field<Zoo,IntData> = Field(
        owner = this,
        index = 11,
        name = "intData",
        type = IntDataMirror,
        optional = false,
        get = { it.intData },
        annotations = listOf<Annotation>()
    )
    
    val fieldUnitN: Field<Zoo,Unit?> = Field(
        owner = this,
        index = 12,
        name = "unitN",
        type = UnitMirror.nullable,
        optional = false,
        get = { it.unitN },
        annotations = listOf<Annotation>()
    )
    
    val fieldBooleanN: Field<Zoo,Boolean?> = Field(
        owner = this,
        index = 13,
        name = "booleanN",
        type = BooleanMirror.nullable,
        optional = false,
        get = { it.booleanN },
        annotations = listOf<Annotation>()
    )
    
    val fieldByteN: Field<Zoo,Byte?> = Field(
        owner = this,
        index = 14,
        name = "byteN",
        type = ByteMirror.nullable,
        optional = false,
        get = { it.byteN },
        annotations = listOf<Annotation>()
    )
    
    val fieldShortN: Field<Zoo,Short?> = Field(
        owner = this,
        index = 15,
        name = "shortN",
        type = ShortMirror.nullable,
        optional = false,
        get = { it.shortN },
        annotations = listOf<Annotation>()
    )
    
    val fieldIntN: Field<Zoo,Int?> = Field(
        owner = this,
        index = 16,
        name = "intN",
        type = IntMirror.nullable,
        optional = false,
        get = { it.intN },
        annotations = listOf<Annotation>()
    )
    
    val fieldLongN: Field<Zoo,Long?> = Field(
        owner = this,
        index = 17,
        name = "longN",
        type = LongMirror.nullable,
        optional = false,
        get = { it.longN },
        annotations = listOf<Annotation>()
    )
    
    val fieldFloatN: Field<Zoo,Float?> = Field(
        owner = this,
        index = 18,
        name = "floatN",
        type = FloatMirror.nullable,
        optional = false,
        get = { it.floatN },
        annotations = listOf<Annotation>()
    )
    
    val fieldDoubleN: Field<Zoo,Double?> = Field(
        owner = this,
        index = 19,
        name = "doubleN",
        type = DoubleMirror.nullable,
        optional = false,
        get = { it.doubleN },
        annotations = listOf<Annotation>()
    )
    
    val fieldCharN: Field<Zoo,Char?> = Field(
        owner = this,
        index = 20,
        name = "charN",
        type = CharMirror.nullable,
        optional = false,
        get = { it.charN },
        annotations = listOf<Annotation>()
    )
    
    val fieldStringN: Field<Zoo,String?> = Field(
        owner = this,
        index = 21,
        name = "stringN",
        type = StringMirror.nullable,
        optional = false,
        get = { it.stringN },
        annotations = listOf<Annotation>()
    )
    
    val fieldEnumN: Field<Zoo,Attitude?> = Field(
        owner = this,
        index = 22,
        name = "enumN",
        type = AttitudeMirror.nullable,
        optional = false,
        get = { it.enumN },
        annotations = listOf<Annotation>()
    )
    
    val fieldIntDataN: Field<Zoo,IntData?> = Field(
        owner = this,
        index = 23,
        name = "intDataN",
        type = IntDataMirror.nullable,
        optional = false,
        get = { it.intDataN },
        annotations = listOf<Annotation>()
    )
    
    val fieldListInt: Field<Zoo,List<Int>> = Field(
        owner = this,
        index = 24,
        name = "listInt",
        type = ListMirror(IntMirror),
        optional = false,
        get = { it.listInt },
        annotations = listOf<Annotation>()
    )
    
    val fieldListIntN: Field<Zoo,List<Int?>> = Field(
        owner = this,
        index = 25,
        name = "listIntN",
        type = ListMirror(IntMirror.nullable),
        optional = false,
        get = { it.listIntN },
        annotations = listOf<Annotation>()
    )
    
    val fieldListListEnumN: Field<Zoo,List<List<Attitude?>>> = Field(
        owner = this,
        index = 26,
        name = "listListEnumN",
        type = ListMirror(ListMirror(AttitudeMirror.nullable)),
        optional = false,
        get = { it.listListEnumN },
        annotations = listOf<Annotation>()
    )
    
    val fieldListIntData: Field<Zoo,List<IntData>> = Field(
        owner = this,
        index = 27,
        name = "listIntData",
        type = ListMirror(IntDataMirror),
        optional = false,
        get = { it.listIntData },
        annotations = listOf<Annotation>()
    )
    
    val fieldListIntDataN: Field<Zoo,List<IntData?>> = Field(
        owner = this,
        index = 28,
        name = "listIntDataN",
        type = ListMirror(IntDataMirror.nullable),
        optional = false,
        get = { it.listIntDataN },
        annotations = listOf<Annotation>()
    )
    
    val fieldTree: Field<Zoo,Tree> = Field(
        owner = this,
        index = 29,
        name = "tree",
        type = TreeMirror,
        optional = false,
        get = { it.tree },
        annotations = listOf<Annotation>()
    )
    
    val fieldMapStringInt: Field<Zoo,Map<String, Int>> = Field(
        owner = this,
        index = 30,
        name = "mapStringInt",
        type = MapMirror(StringMirror, IntMirror),
        optional = false,
        get = { it.mapStringInt },
        annotations = listOf<Annotation>()
    )
    
    val fieldMapIntStringN: Field<Zoo,Map<Int, String?>> = Field(
        owner = this,
        index = 31,
        name = "mapIntStringN",
        type = MapMirror(IntMirror, StringMirror.nullable),
        optional = false,
        get = { it.mapIntStringN },
        annotations = listOf<Annotation>()
    )
    
    val fieldDefaultIfNotPresent: Field<Zoo,Int> = Field(
        owner = this,
        index = 32,
        name = "defaultIfNotPresent",
        type = IntMirror,
        optional = true,
        get = { it.defaultIfNotPresent },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<Zoo, *>> = arrayOf(fieldUnit, fieldBoolean, fieldByte, fieldShort, fieldInt, fieldLong, fieldFloat, fieldDouble, fieldChar, fieldString, fieldEnum, fieldIntData, fieldUnitN, fieldBooleanN, fieldByteN, fieldShortN, fieldIntN, fieldLongN, fieldFloatN, fieldDoubleN, fieldCharN, fieldStringN, fieldEnumN, fieldIntDataN, fieldListInt, fieldListIntN, fieldListListEnumN, fieldListIntData, fieldListIntDataN, fieldTree, fieldMapStringInt, fieldMapIntStringN, fieldDefaultIfNotPresent)
    
    override fun deserialize(decoder: Decoder): Zoo {
        var unitSet = false
        var fieldUnit: Unit? = null
        var booleanSet = false
        var fieldBoolean: Boolean? = null
        var byteSet = false
        var fieldByte: Byte? = null
        var shortSet = false
        var fieldShort: Short? = null
        var intSet = false
        var fieldInt: Int? = null
        var longSet = false
        var fieldLong: Long? = null
        var floatSet = false
        var fieldFloat: Float? = null
        var doubleSet = false
        var fieldDouble: Double? = null
        var charSet = false
        var fieldChar: Char? = null
        var stringSet = false
        var fieldString: String? = null
        var enumSet = false
        var fieldEnum: Attitude? = null
        var intDataSet = false
        var fieldIntData: IntData? = null
        var unitNSet = false
        var fieldUnitN: Unit? = null
        var booleanNSet = false
        var fieldBooleanN: Boolean? = null
        var byteNSet = false
        var fieldByteN: Byte? = null
        var shortNSet = false
        var fieldShortN: Short? = null
        var intNSet = false
        var fieldIntN: Int? = null
        var longNSet = false
        var fieldLongN: Long? = null
        var floatNSet = false
        var fieldFloatN: Float? = null
        var doubleNSet = false
        var fieldDoubleN: Double? = null
        var charNSet = false
        var fieldCharN: Char? = null
        var stringNSet = false
        var fieldStringN: String? = null
        var enumNSet = false
        var fieldEnumN: Attitude? = null
        var intDataNSet = false
        var fieldIntDataN: IntData? = null
        var listIntSet = false
        var fieldListInt: List<Int>? = null
        var listIntNSet = false
        var fieldListIntN: List<Int?>? = null
        var listListEnumNSet = false
        var fieldListListEnumN: List<List<Attitude?>>? = null
        var listIntDataSet = false
        var fieldListIntData: List<IntData>? = null
        var listIntDataNSet = false
        var fieldListIntDataN: List<IntData?>? = null
        var treeSet = false
        var fieldTree: Tree? = null
        var mapStringIntSet = false
        var fieldMapStringInt: Map<String, Int>? = null
        var mapIntStringNSet = false
        var fieldMapIntStringN: Map<Int, String?>? = null
        var defaultIfNotPresentSet = false
        var fieldDefaultIfNotPresent: Int? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldUnit = decoderStructure.decodeUnitElement(this, 0)
                    unitSet = true
                    fieldBoolean = decoderStructure.decodeBooleanElement(this, 1)
                    booleanSet = true
                    fieldByte = decoderStructure.decodeByteElement(this, 2)
                    byteSet = true
                    fieldShort = decoderStructure.decodeShortElement(this, 3)
                    shortSet = true
                    fieldInt = decoderStructure.decodeIntElement(this, 4)
                    intSet = true
                    fieldLong = decoderStructure.decodeLongElement(this, 5)
                    longSet = true
                    fieldFloat = decoderStructure.decodeFloatElement(this, 6)
                    floatSet = true
                    fieldDouble = decoderStructure.decodeDoubleElement(this, 7)
                    doubleSet = true
                    fieldChar = decoderStructure.decodeCharElement(this, 8)
                    charSet = true
                    fieldString = decoderStructure.decodeStringElement(this, 9)
                    stringSet = true
                    fieldEnum = decoderStructure.decodeSerializableElement(this, 10, AttitudeMirror)
                    enumSet = true
                    fieldIntData = decoderStructure.decodeSerializableElement(this, 11, IntDataMirror)
                    intDataSet = true
                    fieldUnitN = decoderStructure.decodeSerializableElement(this, 12, UnitMirror.nullable)
                    unitNSet = true
                    fieldBooleanN = decoderStructure.decodeSerializableElement(this, 13, BooleanMirror.nullable)
                    booleanNSet = true
                    fieldByteN = decoderStructure.decodeSerializableElement(this, 14, ByteMirror.nullable)
                    byteNSet = true
                    fieldShortN = decoderStructure.decodeSerializableElement(this, 15, ShortMirror.nullable)
                    shortNSet = true
                    fieldIntN = decoderStructure.decodeSerializableElement(this, 16, IntMirror.nullable)
                    intNSet = true
                    fieldLongN = decoderStructure.decodeSerializableElement(this, 17, LongMirror.nullable)
                    longNSet = true
                    fieldFloatN = decoderStructure.decodeSerializableElement(this, 18, FloatMirror.nullable)
                    floatNSet = true
                    fieldDoubleN = decoderStructure.decodeSerializableElement(this, 19, DoubleMirror.nullable)
                    doubleNSet = true
                    fieldCharN = decoderStructure.decodeSerializableElement(this, 20, CharMirror.nullable)
                    charNSet = true
                    fieldStringN = decoderStructure.decodeSerializableElement(this, 21, StringMirror.nullable)
                    stringNSet = true
                    fieldEnumN = decoderStructure.decodeSerializableElement(this, 22, AttitudeMirror.nullable)
                    enumNSet = true
                    fieldIntDataN = decoderStructure.decodeSerializableElement(this, 23, IntDataMirror.nullable)
                    intDataNSet = true
                    fieldListInt = decoderStructure.decodeSerializableElement(this, 24, ListMirror(IntMirror))
                    listIntSet = true
                    fieldListIntN = decoderStructure.decodeSerializableElement(this, 25, ListMirror(IntMirror.nullable))
                    listIntNSet = true
                    fieldListListEnumN = decoderStructure.decodeSerializableElement(this, 26, ListMirror(ListMirror(AttitudeMirror.nullable)))
                    listListEnumNSet = true
                    fieldListIntData = decoderStructure.decodeSerializableElement(this, 27, ListMirror(IntDataMirror))
                    listIntDataSet = true
                    fieldListIntDataN = decoderStructure.decodeSerializableElement(this, 28, ListMirror(IntDataMirror.nullable))
                    listIntDataNSet = true
                    fieldTree = decoderStructure.decodeSerializableElement(this, 29, TreeMirror)
                    treeSet = true
                    fieldMapStringInt = decoderStructure.decodeSerializableElement(this, 30, MapMirror(StringMirror, IntMirror))
                    mapStringIntSet = true
                    fieldMapIntStringN = decoderStructure.decodeSerializableElement(this, 31, MapMirror(IntMirror, StringMirror.nullable))
                    mapIntStringNSet = true
                    fieldDefaultIfNotPresent = decoderStructure.decodeIntElement(this, 32)
                    defaultIfNotPresentSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldUnit = decoderStructure.decodeUnitElement(this, 0)
                    unitSet = true
                }
                1 -> {
                    fieldBoolean = decoderStructure.decodeBooleanElement(this, 1)
                    booleanSet = true
                }
                2 -> {
                    fieldByte = decoderStructure.decodeByteElement(this, 2)
                    byteSet = true
                }
                3 -> {
                    fieldShort = decoderStructure.decodeShortElement(this, 3)
                    shortSet = true
                }
                4 -> {
                    fieldInt = decoderStructure.decodeIntElement(this, 4)
                    intSet = true
                }
                5 -> {
                    fieldLong = decoderStructure.decodeLongElement(this, 5)
                    longSet = true
                }
                6 -> {
                    fieldFloat = decoderStructure.decodeFloatElement(this, 6)
                    floatSet = true
                }
                7 -> {
                    fieldDouble = decoderStructure.decodeDoubleElement(this, 7)
                    doubleSet = true
                }
                8 -> {
                    fieldChar = decoderStructure.decodeCharElement(this, 8)
                    charSet = true
                }
                9 -> {
                    fieldString = decoderStructure.decodeStringElement(this, 9)
                    stringSet = true
                }
                10 -> {
                    fieldEnum = decoderStructure.decodeSerializableElement(this, 10, AttitudeMirror)
                    enumSet = true
                }
                11 -> {
                    fieldIntData = decoderStructure.decodeSerializableElement(this, 11, IntDataMirror)
                    intDataSet = true
                }
                12 -> {
                    fieldUnitN = decoderStructure.decodeSerializableElement(this, 12, UnitMirror.nullable)
                    unitNSet = true
                }
                13 -> {
                    fieldBooleanN = decoderStructure.decodeSerializableElement(this, 13, BooleanMirror.nullable)
                    booleanNSet = true
                }
                14 -> {
                    fieldByteN = decoderStructure.decodeSerializableElement(this, 14, ByteMirror.nullable)
                    byteNSet = true
                }
                15 -> {
                    fieldShortN = decoderStructure.decodeSerializableElement(this, 15, ShortMirror.nullable)
                    shortNSet = true
                }
                16 -> {
                    fieldIntN = decoderStructure.decodeSerializableElement(this, 16, IntMirror.nullable)
                    intNSet = true
                }
                17 -> {
                    fieldLongN = decoderStructure.decodeSerializableElement(this, 17, LongMirror.nullable)
                    longNSet = true
                }
                18 -> {
                    fieldFloatN = decoderStructure.decodeSerializableElement(this, 18, FloatMirror.nullable)
                    floatNSet = true
                }
                19 -> {
                    fieldDoubleN = decoderStructure.decodeSerializableElement(this, 19, DoubleMirror.nullable)
                    doubleNSet = true
                }
                20 -> {
                    fieldCharN = decoderStructure.decodeSerializableElement(this, 20, CharMirror.nullable)
                    charNSet = true
                }
                21 -> {
                    fieldStringN = decoderStructure.decodeSerializableElement(this, 21, StringMirror.nullable)
                    stringNSet = true
                }
                22 -> {
                    fieldEnumN = decoderStructure.decodeSerializableElement(this, 22, AttitudeMirror.nullable)
                    enumNSet = true
                }
                23 -> {
                    fieldIntDataN = decoderStructure.decodeSerializableElement(this, 23, IntDataMirror.nullable)
                    intDataNSet = true
                }
                24 -> {
                    fieldListInt = decoderStructure.decodeSerializableElement(this, 24, ListMirror(IntMirror))
                    listIntSet = true
                }
                25 -> {
                    fieldListIntN = decoderStructure.decodeSerializableElement(this, 25, ListMirror(IntMirror.nullable))
                    listIntNSet = true
                }
                26 -> {
                    fieldListListEnumN = decoderStructure.decodeSerializableElement(this, 26, ListMirror(ListMirror(AttitudeMirror.nullable)))
                    listListEnumNSet = true
                }
                27 -> {
                    fieldListIntData = decoderStructure.decodeSerializableElement(this, 27, ListMirror(IntDataMirror))
                    listIntDataSet = true
                }
                28 -> {
                    fieldListIntDataN = decoderStructure.decodeSerializableElement(this, 28, ListMirror(IntDataMirror.nullable))
                    listIntDataNSet = true
                }
                29 -> {
                    fieldTree = decoderStructure.decodeSerializableElement(this, 29, TreeMirror)
                    treeSet = true
                }
                30 -> {
                    fieldMapStringInt = decoderStructure.decodeSerializableElement(this, 30, MapMirror(StringMirror, IntMirror))
                    mapStringIntSet = true
                }
                31 -> {
                    fieldMapIntStringN = decoderStructure.decodeSerializableElement(this, 31, MapMirror(IntMirror, StringMirror.nullable))
                    mapIntStringNSet = true
                }
                32 -> {
                    fieldDefaultIfNotPresent = decoderStructure.decodeIntElement(this, 32)
                    defaultIfNotPresentSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!unitSet) {
            throw MissingFieldException("unit")
        }
        if(!booleanSet) {
            throw MissingFieldException("boolean")
        }
        if(!byteSet) {
            throw MissingFieldException("byte")
        }
        if(!shortSet) {
            throw MissingFieldException("short")
        }
        if(!intSet) {
            throw MissingFieldException("int")
        }
        if(!longSet) {
            throw MissingFieldException("long")
        }
        if(!floatSet) {
            throw MissingFieldException("float")
        }
        if(!doubleSet) {
            throw MissingFieldException("double")
        }
        if(!charSet) {
            throw MissingFieldException("char")
        }
        if(!stringSet) {
            throw MissingFieldException("string")
        }
        if(!enumSet) {
            throw MissingFieldException("enum")
        }
        if(!intDataSet) {
            throw MissingFieldException("intData")
        }
        if(!listIntSet) {
            throw MissingFieldException("listInt")
        }
        if(!listIntNSet) {
            throw MissingFieldException("listIntN")
        }
        if(!listListEnumNSet) {
            throw MissingFieldException("listListEnumN")
        }
        if(!listIntDataSet) {
            throw MissingFieldException("listIntData")
        }
        if(!listIntDataNSet) {
            throw MissingFieldException("listIntDataN")
        }
        if(!treeSet) {
            throw MissingFieldException("tree")
        }
        if(!mapStringIntSet) {
            throw MissingFieldException("mapStringInt")
        }
        if(!mapIntStringNSet) {
            throw MissingFieldException("mapIntStringN")
        }
        if(!defaultIfNotPresentSet) {
            fieldDefaultIfNotPresent = 42
        }
        return Zoo(
            unit = fieldUnit as Unit,
            boolean = fieldBoolean as Boolean,
            byte = fieldByte as Byte,
            short = fieldShort as Short,
            int = fieldInt as Int,
            long = fieldLong as Long,
            float = fieldFloat as Float,
            double = fieldDouble as Double,
            char = fieldChar as Char,
            string = fieldString as String,
            enum = fieldEnum as Attitude,
            intData = fieldIntData as IntData,
            unitN = fieldUnitN as Unit?,
            booleanN = fieldBooleanN as Boolean?,
            byteN = fieldByteN as Byte?,
            shortN = fieldShortN as Short?,
            intN = fieldIntN as Int?,
            longN = fieldLongN as Long?,
            floatN = fieldFloatN as Float?,
            doubleN = fieldDoubleN as Double?,
            charN = fieldCharN as Char?,
            stringN = fieldStringN as String?,
            enumN = fieldEnumN as Attitude?,
            intDataN = fieldIntDataN as IntData?,
            listInt = fieldListInt as List<Int>,
            listIntN = fieldListIntN as List<Int?>,
            listListEnumN = fieldListListEnumN as List<List<Attitude?>>,
            listIntData = fieldListIntData as List<IntData>,
            listIntDataN = fieldListIntDataN as List<IntData?>,
            tree = fieldTree as Tree,
            mapStringInt = fieldMapStringInt as Map<String, Int>,
            mapIntStringN = fieldMapIntStringN as Map<Int, String?>,
            defaultIfNotPresent = fieldDefaultIfNotPresent as Int
        )
    }
    
    override fun serialize(encoder: Encoder, obj: Zoo) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeUnitElement(this, 0)
        encoderStructure.encodeBooleanElement(this, 1, obj.boolean)
        encoderStructure.encodeByteElement(this, 2, obj.byte)
        encoderStructure.encodeShortElement(this, 3, obj.short)
        encoderStructure.encodeIntElement(this, 4, obj.int)
        encoderStructure.encodeLongElement(this, 5, obj.long)
        encoderStructure.encodeFloatElement(this, 6, obj.float)
        encoderStructure.encodeDoubleElement(this, 7, obj.double)
        encoderStructure.encodeCharElement(this, 8, obj.char)
        encoderStructure.encodeStringElement(this, 9, obj.string)
        encoderStructure.encodeSerializableElement(this, 10, AttitudeMirror, obj.enum)
        encoderStructure.encodeSerializableElement(this, 11, IntDataMirror, obj.intData)
        encoderStructure.encodeSerializableElement(this, 12, UnitMirror.nullable, obj.unitN)
        encoderStructure.encodeSerializableElement(this, 13, BooleanMirror.nullable, obj.booleanN)
        encoderStructure.encodeSerializableElement(this, 14, ByteMirror.nullable, obj.byteN)
        encoderStructure.encodeSerializableElement(this, 15, ShortMirror.nullable, obj.shortN)
        encoderStructure.encodeSerializableElement(this, 16, IntMirror.nullable, obj.intN)
        encoderStructure.encodeSerializableElement(this, 17, LongMirror.nullable, obj.longN)
        encoderStructure.encodeSerializableElement(this, 18, FloatMirror.nullable, obj.floatN)
        encoderStructure.encodeSerializableElement(this, 19, DoubleMirror.nullable, obj.doubleN)
        encoderStructure.encodeSerializableElement(this, 20, CharMirror.nullable, obj.charN)
        encoderStructure.encodeSerializableElement(this, 21, StringMirror.nullable, obj.stringN)
        encoderStructure.encodeSerializableElement(this, 22, AttitudeMirror.nullable, obj.enumN)
        encoderStructure.encodeSerializableElement(this, 23, IntDataMirror.nullable, obj.intDataN)
        encoderStructure.encodeSerializableElement(this, 24, ListMirror(IntMirror), obj.listInt)
        encoderStructure.encodeSerializableElement(this, 25, ListMirror(IntMirror.nullable), obj.listIntN)
        encoderStructure.encodeSerializableElement(this, 26, ListMirror(ListMirror(AttitudeMirror.nullable)), obj.listListEnumN)
        encoderStructure.encodeSerializableElement(this, 27, ListMirror(IntDataMirror), obj.listIntData)
        encoderStructure.encodeSerializableElement(this, 28, ListMirror(IntDataMirror.nullable), obj.listIntDataN)
        encoderStructure.encodeSerializableElement(this, 29, TreeMirror, obj.tree)
        encoderStructure.encodeSerializableElement(this, 30, MapMirror(StringMirror, IntMirror), obj.mapStringInt)
        encoderStructure.encodeSerializableElement(this, 31, MapMirror(IntMirror, StringMirror.nullable), obj.mapIntStringN)
        encoderStructure.encodeIntElement(this, 32, obj.defaultIfNotPresent)
        encoderStructure.endStructure(this)
    }
}
