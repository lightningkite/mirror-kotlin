//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.serialization.json

import com.lightningkite.lokalize.time.TimeStamp
import com.lightningkite.lokalize.time.TimeStampMirror
import com.lightningkite.mirror.registerTest
import com.lightningkite.recktangle.Point
import com.lightningkite.recktangle.PointMirror
import kotlinx.serialization.json.Json
import kotlin.reflect.KClass
import kotlin.test.Test
import com.lightningkite.mirror.info.*
import kotlinx.serialization.*

object SimpleJSONTestPostMirror : MirrorClass<SimpleJSONTest.Post>() {
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<SimpleJSONTest.Post> get() = SimpleJSONTest.Post::class as KClass<SimpleJSONTest.Post>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.serialization.json"
    override val localName: String get() = "SimpleJSONTest.Post"
    override val owningClass: KClass<*>? get() = SimpleJSONTest::class
    
    val fieldId: Field<SimpleJSONTest.Post,Long?> = Field(
        owner = this,
        name = "id",
        type = LongMirror.nullable,
        optional = true,
        get = { it.id },
        set = { it, value -> it.id = value },
        annotations = listOf<Annotation>()
    )
    
    val fieldUserId: Field<SimpleJSONTest.Post,Long> = Field(
        owner = this,
        name = "userId",
        type = LongMirror,
        optional = true,
        get = { it.userId },
        set = { it, value -> it.userId = value },
        annotations = listOf<Annotation>()
    )
    
    val fieldTitle: Field<SimpleJSONTest.Post,String> = Field(
        owner = this,
        name = "title",
        type = StringMirror,
        optional = true,
        get = { it.title },
        set = { it, value -> it.title = value },
        annotations = listOf<Annotation>()
    )
    
    val fieldBody: Field<SimpleJSONTest.Post,String> = Field(
        owner = this,
        name = "body",
        type = StringMirror,
        optional = true,
        get = { it.body },
        set = { it, value -> it.body = value },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<SimpleJSONTest.Post, *>> = arrayOf(fieldId, fieldUserId, fieldTitle, fieldBody)
    
    override fun deserialize(decoder: Decoder): SimpleJSONTest.Post {
        var idSet = false
        var fieldId: Long? = null
        var userIdSet = false
        var fieldUserId: Long? = null
        var titleSet = false
        var fieldTitle: String? = null
        var bodySet = false
        var fieldBody: String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldId = decoderStructure.decodeSerializableElement(this, 0, LongMirror.nullable)
                    idSet = true
                    fieldUserId = decoderStructure.decodeLongElement(this, 1)
                    userIdSet = true
                    fieldTitle = decoderStructure.decodeStringElement(this, 2)
                    titleSet = true
                    fieldBody = decoderStructure.decodeStringElement(this, 3)
                    bodySet = true
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldId = decoderStructure.decodeSerializableElement(this, 0, LongMirror.nullable)
                    idSet = true
                }
                1 -> {
                    fieldUserId = decoderStructure.decodeLongElement(this, 1)
                    userIdSet = true
                }
                2 -> {
                    fieldTitle = decoderStructure.decodeStringElement(this, 2)
                    titleSet = true
                }
                3 -> {
                    fieldBody = decoderStructure.decodeStringElement(this, 3)
                    bodySet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!idSet) {
            fieldId = null
        }
        if(!userIdSet) {
            fieldUserId = 0
        }
        if(!titleSet) {
            fieldTitle = ""
        }
        if(!bodySet) {
            fieldBody = ""
        }
        return SimpleJSONTest.Post(
            id = fieldId as Long?,
            userId = fieldUserId as Long,
            title = fieldTitle as String,
            body = fieldBody as String
        )
    }
    
    override fun serialize(encoder: Encoder, obj: SimpleJSONTest.Post) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeSerializableElement(this, 0, LongMirror.nullable, obj.id)
        encoderStructure.encodeLongElement(this, 1, obj.userId)
        encoderStructure.encodeStringElement(this, 2, obj.title)
        encoderStructure.encodeStringElement(this, 3, obj.body)
        encoderStructure.endStructure(this)
    }
}
