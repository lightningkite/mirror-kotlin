//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.request

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import mirror.kotlin.*

data class RemoteResultMirror<T: Any?>(
    val TMirror: MirrorType<T>
) : MirrorClass<RemoteResult<T>>() {
    
    override val mirrorClassCompanion: MirrorClassCompanion? get() = Companion
    companion object : MirrorClassCompanion {
        override val minimal = RemoteResultMirror(TypeArgumentMirrorType("T", AnyMirror.nullable))
        override fun make(typeArguments: List<MirrorType<*>>): MirrorClass<*> = RemoteResultMirror(typeArguments[0] as MirrorType<Any?>)
    }
    
    override val typeParameters: Array<MirrorType<*>> get() = arrayOf(TMirror)
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<RemoteResult<T>> get() = RemoteResult::class as KClass<RemoteResult<T>>
    override val modifiers: Array<Modifier> get() = arrayOf(Modifier.Data)
    override val packageName: String get() = "com.lightningkite.mirror.request"
    override val localName: String get() = "RemoteResult"
    override val implements: Array<MirrorClass<*>> get() = arrayOf()
    
    val fieldResultOrNull: Field<RemoteResult<T>,T?> = Field(
        owner = this,
        index = 0,
        name = "resultOrNull",
        type = TMirror.nullable,
        optional = true,
        get = { it.resultOrNull },
        annotations = listOf<Annotation>()
    )
    
    val fieldException: Field<RemoteResult<T>,RemoteExceptionData?> = Field(
        owner = this,
        index = 1,
        name = "exception",
        type = RemoteExceptionDataMirror.nullable,
        optional = true,
        get = { it.exception },
        annotations = listOf<Annotation>()
    )
    
    override val fields: Array<Field<RemoteResult<T>, *>> = arrayOf(fieldResultOrNull, fieldException)
    
    override fun deserialize(decoder: Decoder): RemoteResult<T> {
        var resultOrNullSet = false
        var fieldResultOrNull: T? = null
        var exceptionSet = false
        var fieldException: RemoteExceptionData? = null
        val decoderStructure = decoder.beginStructure(this, TMirror)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldResultOrNull = decoderStructure.decodeSerializableElement(this, 0, TMirror.nullable)
                    resultOrNullSet = true
                    fieldException = decoderStructure.decodeSerializableElement(this, 1, RemoteExceptionDataMirror.nullable)
                    exceptionSet = true
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldResultOrNull = decoderStructure.decodeSerializableElement(this, 0, TMirror.nullable)
                    resultOrNullSet = true
                }
                1 -> {
                    fieldException = decoderStructure.decodeSerializableElement(this, 1, RemoteExceptionDataMirror.nullable)
                    exceptionSet = true
                }
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        if(!resultOrNullSet) {
            fieldResultOrNull = null
        }
        if(!exceptionSet) {
            fieldException = null
        }
        return RemoteResult<T>(
            resultOrNull = fieldResultOrNull as T?,
            exception = fieldException as RemoteExceptionData?
        )
    }
    
    override fun serialize(encoder: Encoder, obj: RemoteResult<T>) {
        val encoderStructure = encoder.beginStructure(this, TMirror)
        encoderStructure.encodeSerializableElement(this, 0, TMirror.nullable, obj.resultOrNull)
        encoderStructure.encodeSerializableElement(this, 1, RemoteExceptionDataMirror.nullable, obj.exception)
        encoderStructure.endStructure(this)
    }
}
