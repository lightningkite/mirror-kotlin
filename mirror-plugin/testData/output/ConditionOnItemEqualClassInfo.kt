//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemEqualClassInfo: ClassInfo<ConditionOnItem.Equal<*,*>> {

   override val kClass: KClass<ConditionOnItem.Equal<*,*>> = ConditionOnItem.Equal::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "Equal"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.Equal<*,*>>? = null

   object Fields {
       val field = SerializedFieldInfo<ConditionOnItem.Equal<*,*>, com.lightningkite.mirror.info.SerializedFieldInfo<PANIC_A,PANIC_A>>(ConditionOnItemEqualClassInfo, "field", Type<com.lightningkite.mirror.info.SerializedFieldInfo<PANIC_A,PANIC_A>>(com.lightningkite.mirror.info.SerializedFieldInfo::class, listOf(TypeProjection(Type<PANIC_A>(PANIC_A::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<PANIC_A>(PANIC_A::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as com.lightningkite.mirror.info.SerializedFieldInfo<PANIC_A,PANIC_A>}, listOf())
        val value = SerializedFieldInfo<ConditionOnItem.Equal<*,*>, PANIC_A>(ConditionOnItemEqualClassInfo, "value", Type<PANIC_A>(PANIC_A::class, listOf(), false), false, { it.value as PANIC_A}, listOf())
   }

   override val fields:List<SerializedFieldInfo<ConditionOnItem.Equal<*,*>, *>> = listOf(Fields.field, Fields.value)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.Equal<kotlin.Any,Any?> {
       //Gather variables
       val field:com.lightningkite.mirror.info.SerializedFieldInfo<PANIC_A,PANIC_A> = map["field"] as com.lightningkite.mirror.info.SerializedFieldInfo<PANIC_A,PANIC_A>
        val value:PANIC_A = map["value"] as PANIC_A
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.Equal<kotlin.Any,Any?>(
           field = field,
            value = value
       )
   }

}