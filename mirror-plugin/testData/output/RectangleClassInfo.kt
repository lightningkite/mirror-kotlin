//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.recktangle


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST")
object RectangleClassInfo : ClassInfo<Rectangle> {

    override val kClass: KClass<Rectangle> = Rectangle::class
    override val modifiers: List<ClassInfo.Modifier> = listOf()

    override val implements: List<Type<*>> = listOf()

    override val packageName: String = "com.lightningkite.recktangle"
    override val owner: KClass<*>? = null
    override val ownerName: String? = null

    override val name: String = "Rectangle"
    override val annotations: List<AnnotationInfo> = listOf()
    override val enumValues: List<Rectangle>? = null

    object Fields {
        val left = SerializedFieldInfo<Rectangle, kotlin.Float>(RectangleClassInfo, "left", Type<kotlin.Float>(kotlin.Float::class as KClass<kotlin.Float>, listOf(), false), true, { it.left as kotlin.Float }, listOf())
        val top = SerializedFieldInfo<Rectangle, kotlin.Float>(RectangleClassInfo, "top", Type<kotlin.Float>(kotlin.Float::class as KClass<kotlin.Float>, listOf(), false), true, { it.top as kotlin.Float }, listOf())
        val right = SerializedFieldInfo<Rectangle, kotlin.Float>(RectangleClassInfo, "right", Type<kotlin.Float>(kotlin.Float::class as KClass<kotlin.Float>, listOf(), false), true, { it.right as kotlin.Float }, listOf())
        val bottom = SerializedFieldInfo<Rectangle, kotlin.Float>(RectangleClassInfo, "bottom", Type<kotlin.Float>(kotlin.Float::class as KClass<kotlin.Float>, listOf(), false), true, { it.bottom as kotlin.Float }, listOf())
    }

    override val fields: List<SerializedFieldInfo<Rectangle, *>> = listOf(Fields.left, Fields.top, Fields.right, Fields.bottom)

    override fun construct(map: Map<String, Any?>): Rectangle {
        //Gather variables

        //Handle the optionals
        val left: kotlin.Float = map["left"] as? kotlin.Float ?: (Fields.left.get(Rectangle()) as kotlin.Float)
        val top: kotlin.Float = map["top"] as? kotlin.Float ?: (Fields.top.get(Rectangle(left = left)) as kotlin.Float)
        val right: kotlin.Float = map["right"] as? kotlin.Float
                ?: (Fields.right.get(Rectangle(left = left, top = top)) as kotlin.Float)
        val bottom: kotlin.Float = map["bottom"] as? kotlin.Float
                ?: (Fields.bottom.get(Rectangle(left = left, top = top, right = right)) as kotlin.Float)
        //Finally do the call
        return Rectangle(
                left = left,
                top = top,
                right = right,
                bottom = bottom
        )
    }

}