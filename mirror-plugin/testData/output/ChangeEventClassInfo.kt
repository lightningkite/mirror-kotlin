//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.kotlinx.persistence


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ChangeEventClassInfo: ClassInfo<ChangeEvent<*,*>> {

   override val kClass: KClass<ChangeEvent<*,*>> = ChangeEvent::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf(Type<ModificationOnItem>(ModificationOnItem::class, listOf(), false))

   override val packageName: String = "com.lightningkite.kotlinx.persistence"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "ChangeEvent"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ChangeEvent<*,*>>? = null

   object Fields {
       val field = SerializedFieldInfo<ChangeEvent<*,*>, SerializedFieldInfo<Any,Any?>>(ChangeEventClassInfo, "field", Type<SerializedFieldInfo<Any,Any?>>(SerializedFieldInfo::class, listOf(TypeProjection(Type<Any>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as SerializedFieldInfo<Any,Any?>}, listOf())
        val value = SerializedFieldInfo<ChangeEvent<*,*>, Any?>(ChangeEventClassInfo, "value", Type<Any?>(Any::class, listOf(), false), false, { it.value as Any?}, listOf())
   }

   override val fields:List<SerializedFieldInfo<ChangeEvent<*,*>, *>> = listOf(Fields.field, Fields.value)

   override fun construct(map: Map<String, Any?>): ChangeEvent<Any,Any?> {
       //Gather variables
       val field:SerializedFieldInfo<Any,Any?> = map["field"] as SerializedFieldInfo<Any,Any?>
        val value:Any? = map["value"] as Any?
           //Handle the optionals
       
       //Finally do the call
       return ChangeEvent<Any,Any?>(
           field = field,
            value = value
       )
   }

}