//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.server.test

import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.mirror.request.Request
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import com.lightningkite.mirror.request.RequestMirror

object PingRequestMirror : MirrorClass<PingRequest>() {
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<PingRequest>
        get() = PingRequest::class as KClass<PingRequest>
    override val modifiers: Array<Modifier> get() = arrayOf()
    override val packageName: String get() = "com.lightningkite.mirror.server.test"
    override val localName: String get() = "PingRequest"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(RequestMirror(StringMirror))

    val fieldName: Field<PingRequest, String> = Field(
            owner = this,
            name = "name",
            type = StringMirror,
            optional = false,
            get = { it.name },
            annotations = listOf<Annotation>()
    )

    override val fields: Array<Field<PingRequest, *>> = arrayOf(fieldName)

    override fun deserialize(decoder: Decoder): PingRequest {
        var nameSet = false
        var fieldName: String? = null
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    fieldName = decoderStructure.decodeStringElement(this, 0)
                    nameSet = true
                }
                CompositeDecoder.READ_DONE -> break@loop
                0 -> {
                    fieldName = decoderStructure.decodeStringElement(this, 0)
                    nameSet = true
                }
                else -> {
                }
            }
        }
        decoderStructure.endStructure(this)
        if (!nameSet) {
            throw MissingFieldException("name")
        }
        return PingRequest(
                name = fieldName as String
        )
    }

    override fun serialize(encoder: Encoder, obj: PingRequest) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.encodeStringElement(this, 0, obj.name)
        encoderStructure.endStructure(this)
    }
}
