//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.server.test

import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.mirror.request.Request
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass
import kotlinx.serialization.*
import com.lightningkite.mirror.request.RequestMirror
import com.lightningkite.mirror.info.ThrowsTypesMirror

object ThrowExceptionRequestMirror : MirrorClass<ThrowExceptionRequest>() {
    @Suppress("UNCHECKED_CAST")
    override val kClass: KClass<ThrowExceptionRequest> get() = ThrowExceptionRequest::class as KClass<ThrowExceptionRequest>
    override val modifiers: Array<Modifier> get() = arrayOf()
    override val packageName: String get() = "com.lightningkite.mirror.server.test"
    override val localName: String get() = "ThrowExceptionRequest"
    override val implements: Array<MirrorClass<*>> get() = arrayOf(RequestMirror(UnitMirror))
    override val annotations: List<Annotation> = listOf(ThrowsTypesMirror("ForbiddenException"))
    
    override val fields: Array<Field<ThrowExceptionRequest, *>> = arrayOf()
    
    override fun deserialize(decoder: Decoder): ThrowExceptionRequest {
        val decoderStructure = decoder.beginStructure(this)
        loop@ while (true) {
            when (decoderStructure.decodeElementIndex(this)) {
                CompositeDecoder.READ_ALL -> {
                    break@loop
                }
                CompositeDecoder.READ_DONE -> break@loop
                else -> {}
            }
        }
        decoderStructure.endStructure(this)
        return ThrowExceptionRequest(
        )
    }
    
    override fun serialize(encoder: Encoder, obj: ThrowExceptionRequest) {
        val encoderStructure = encoder.beginStructure(this)
        encoderStructure.endStructure(this)
    }
}
